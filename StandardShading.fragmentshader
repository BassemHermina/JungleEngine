#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;


// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform float LightPower;
uniform float r; //da el ana 3mlto (bassem) 3ashan n3'aiar ambient el red , we el bya5do mn hna , el GLuint rr =glGetUniformLocation(programID, "r"); el fi el cpp
uniform float g;

uniform sampler2D shadowMap;
varying vec4 ShadowCoord;

float LinearizeDepth (float depth);

void main(){



	vec2 poissonDisk[16] = vec2[](
    vec2( -0.94201624, -0.39906216 ),
    vec2( 0.94558609, -0.76890725 ),
    vec2( -0.094184101, -0.92938870 ),
    vec2( 0.34495938, 0.29387760 ),
    vec2( -0.280280, 0.73073 ),
    vec2( -0.5105105, 0.060060 ),
    vec2( -0.02002, 0.080080 ),
    vec2( 0.3803803, 0.5015045),
    vec2( 0.992978, -0.22066116 ),
    vec2(0.25075229, -0.160481 ),
    vec2( 0.77231695001, -0.0200600 ),
    vec2( -0.35105, -0.64192570 ),
    vec2( -0.88264624, 0.05015016 ),
    vec2( 0.8024072, 0.712136405 ),
    vec2( -0.9929789301, -0.92938870 ),
    vec2( 0.962888638, 0.29387760 )
    );


	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(0.9,0.9,1.0); //light blue

	
	// Material properties
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.3,0.3,0.3) * MaterialDiffuseColor;
	//vec3 MaterialAmbientColor =  MaterialDiffuseColor; // k2ni drabt fi vec3(1,1,1)
	//el effect el ana 3aizo el flat da , el ambient fih = 1 bayen
	vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1);

	//// Distance to the light
	////float distance = length( LightPosition_worldspace - Position_worldspace );

	// bassem edit 1 directional light
	// Distance to the light
	// all fragmenst should have only vertical distance to the light
	//assumed that the only important distance is the vertical distance ( light is above
	// another idea is that directional light don't depend on distance
	// mthya2li da (el distance el sabet ) habaawaz el shadow mapping keda
	float distance = 20 ; //ai rakam sabet

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)

	////Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// this causes softer shdow on the object itself
	
	//bassem edit 2 to turn into directional light
	// all fragments should have same direction of light
	//LightDirection_cameraspace;// =;
	//vec3 l = LightPosition_worldspace.xyz;
	//this causes hard edged shadow on the objects ( stylized ) 	

	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	


	////////////////////////////////////////
	//Shadow mapping calc.s//
	float visibility = 1.0;
	//el satr da el debug el fahmni en l texture fiha 7aga 3'alat
	//3ashan bayn keda en kol el values el fi el texture bt2ol nafs el rakam, 
	//fa lma bkarenha b rakm sabet kolha btt7rak m3aia 
	//if ( texture2D( shadowMap, ShadowCoord.xy ).z+0.6  <  ShadowCoord.z)
	
	//WITHOUT ACNE
	//float bias = 0.005;
	// float bias = 0.02*tan(acos(cosTheta)); // cosTheta is dot( n,l ), clamped between 0 and 1
	// bias = clamp(bias, 0,0.01);
	// //float visibility = 1.0;
	// if ( texture2D( shadowMap, ShadowCoord.xy ).z  <  ShadowCoord.z-bias){
	//   	 visibility = 0.0;
	// }

	///POISSON SAMPLING
	float bias = 0.02*tan(acos(cosTheta)); // cosTheta is dot( n,l ), clamped between 0 and 1
	bias = clamp(bias, 0,0.01);
	for (int i=0;i<16;i++){
 	 	if ( texture2D( shadowMap, ShadowCoord.xy + poissonDisk[i]/800.0 ).z  <  ShadowCoord.z-bias ){
 	  		visibility-=0.05;
 	 	}
	}


	// //WITH ACNE
	// if ( texture2D( shadowMap, ShadowCoord.xy ).z  <  ShadowCoord.z)
	// {
    //   	visibility = 0.0;
	// }


	gl_FragColor.rgb = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		visibility *  MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

	// end of Phong shading model
	///////////////////////////////////////////////////////////////////////


	//testing the depth fighting and stuff about depth buffer
	//rendering the scene in colors of depth (black = near)
	//float depth = LinearizeDepth(gl_FragCoord.z);
	//gl_FragColor.rgb = vec3(depth);





}

float LinearizeDepth(float depth)
{
	float near = 0.1;
	float far = 100.0;
	float z = depth * 2.0 - 1.0; // Back to NDC
	return (2.0 * near) / (far + near - z * (far - near));
}
